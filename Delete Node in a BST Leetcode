/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // TC - 0(n) and SC - 0(n). n - height of the tree.
    int minOfBST(TreeNode * root){
        while(root -> left != NULL){
            root = root -> left;
        }
        return root -> val; // That node's value will be minimum in our BST.
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        // Base case
        if(root == NULL){
            return NULL;
        }

        if(root->val == key){
            // Yaha pe deletion wala logic 
            // For 0 child
            if(root -> left == NULL && root -> right == NULL){
                delete root;
                return NULL;
            }

            // For 1 child 
            // Left node exist
            if(root -> left != NULL && root -> right == NULL){
                TreeNode * temp = root -> left;
                delete root;
                return temp;
            }

            // Right node exist
            if(root -> left == NULL && root -> right != NULL){
                TreeNode * temp = root -> right;
                delete root;
                return temp;
            }

            // For 2 child 
            int mini = minOfBST(root->right);
            root -> val = mini;

            root -> right = deleteNode(root->right,mini);
            return root;
        }
        else if(root -> val > key){
            // Left Subtree mai jaana hai .
            root -> left = deleteNode(root->left,key);
            return root;
        }
        else{
            // Right subtree mai jaana hai .
            root -> right = deleteNode(root->right,key);
            return root;
        }
    }
};
