/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        // 1st Approach i solved alone . isme level order traversal ka concept laga do aur jaha bhi apne ko null mil gaya queue mai iska matlab purana level khatam and naya level shuru so increment count in that situation to 1 .

        // Edge Case
        /*
        if(root == NULL){
            return NULL;
        }
        queue<TreeNode *> q;
        q.push(root);
        q.push(NULL);
        int count = 0;

        while(!q.empty()){
            TreeNode * temp = q.front();
            q.pop();

            if(temp == NULL){
                count++;
                if(!q.empty()){
                    q.push(NULL);
                }
            }
            else{
                if(temp -> left){
                    q.push(temp -> left);
                }
                if(temp -> right){
                    q.push(temp -> right);
                }
            }
        }

        return count;

        */

        // 2nd approach By love babbar isme normal recursion ka use karrahe hai recursion apne ko root ke left and right ka number dedega right uske maximum ke mai se 1 add karke number of nodes mil jayenge. 1 add kiya becaues root bhi hai .

        // Base case
        if(root == NULL){
            return 0; // because root == NULL to woh 0 hi hoga.
        }
        else{
            int left = maxDepth(root->left); // root ke left wale tree ke andar jo max depth aa rahi hai nodes ki woh count karo 
            int right = maxDepth(root ->right); // root ke right wale tree ke andar jo max depth aa rahi hai nodes ki woh count karo 

            return max(left,right) + 1;
        }

    }
};
