/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Iss approach mai basically hum sare paths find karrahe hai from root to any node and har eak path ke nodes ka sum from end karke check karrahe hai whether their sum is equal to targetSum or not. TC - TC will be O(N * No. of nodes in vector) SC - 0(n)
    void solve(TreeNode * root , int targetSum , int &count,vector<int> path){
        if(root == NULL){
            return ;
        }
        else{
            path.push_back(root->val);

            solve(root->left,targetSum,count,path);
            solve(root->right,targetSum,count,path);

            long long sum = 0;
            // to understand why we started this from end not from start refer 1st example and try karo ki kaise tum start pe karke loop paths find karoge.
            for(int i = path.size()-1; i >= 0; i--){
                sum += path[i];
                if(sum == targetSum){
                    count++;
                }
            }

            // Kyuki humne path vector ko by copy pass kara hai isliye calls return hone pe automatically usme se curr node pop back ho jayega .
            
        }
    }

    int pathSum(TreeNode* root, int targetSum) {
        vector<int> path;
        int count = 0;
        solve(root,targetSum,count,path);
        return count;
    }
};
