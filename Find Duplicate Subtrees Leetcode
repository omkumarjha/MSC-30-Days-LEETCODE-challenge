/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 class Solution {
public:
    // In this approach hum binary tree ko string mai covert kar rahe hai and usko uski frequency ke sath map mai store kar rahe hai .
    // TC - 0(n) and SC - 0(n)

    // Serialize subtrees and check for duplicates using a post-order traversal
    string serializeSubtrees(TreeNode* node, map<string, int>& subtrees, vector<TreeNode*>& duplicates) {
        if (node == NULL) return "#"; // Null nodes are represented by '#' . we are using # for the delemeter . because node ka structure same bhi hona chahiye duplicacy ke liye isliye yeh delimeter ko use karne se hum nodes ka structure same aa raha hai ya nhi usko track kar sakte hai . 
        
        string left = serializeSubtrees(node->left, subtrees, duplicates);
        string right = serializeSubtrees(node->right, subtrees, duplicates);
        
        string s = left + "," + right + "," + to_string(node->val); // Serialize the current subtree . yaha pe comma laga rahe hai kyuki aaisa bhi ho sakta hai ki nodes ka structure same ho but uss subtree ke data values alag alga place mai ho to usko track rakhne ke liye . 
        
        if (subtrees[s] == 1) duplicates.push_back(node); // If a duplicate subtree is found, add to the vector
        
        subtrees[s]++;
        return s;
    }
 vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        map<string, int> subtrees; // Store serialized subtree and its frequency
        vector<TreeNode*> duplicates; // Store duplicate subtrees
        
        serializeSubtrees(root, subtrees, duplicates); // Traverse the tree and serialize subtrees
        
        return duplicates;
    }
    
};
