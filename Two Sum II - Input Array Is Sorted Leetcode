class Solution {
public:
    // Below approach is with 2 pointer. TC - 0(n) and SC - 0(1);
    
    vector<int> twoSum(vector<int>& numbers, int target){

        int i = 0 , j = numbers.size()-1;

        while(i < j){
            int sum = numbers[i] + numbers[j];

            if(sum == target){
                return {i+1,j+1};
            }
            else if(sum > target){
                j--;
            }
            else{
                i++;
            }
        }

        return {};
    }
    

    // Below approach is with Binary search TC - 0(nlog n) SC - 0(1)
    /*
    int binarySearch(vector<int> nums,int start,int end,int target){
        int mid = start + (end - start)/2;

        while(start <= end){
            if(nums[mid] == target){
                return mid+1;
            }
            else if(nums[mid] > target){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
            mid = start + (end - start)/2;
        }
        return -1;
    }

    vector<int> twoSum(vector<int>& numbers, int target){
        int n = numbers.size();

        for(int i = 0; i < n; i++){
            int remaining = target - numbers[i];
            int value = binarySearch(numbers,i+1,n-1,remaining);
            if(value != -1){
                return {i+1,value};
            }
        }

        return {};
    }

    */


};
