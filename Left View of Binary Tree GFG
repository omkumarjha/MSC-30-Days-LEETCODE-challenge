/* A binary tree node

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

//below approach mai hum level order traversal karke left view of a binary tree find kar rahe hai 
// TC 0(n) SC - 0(n)
/*
vector<int> leftView(Node *root){
    
    vector<int> ans;
    
    // Edge case
    if(root == NULL){
        return ans;
    }
    
    ans.push_back(root->data);
    queue<Node * > q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        Node * temp = q.front();
        q.pop();
        
        if(temp == NULL){
            if(!q.empty()){
                ans.push_back(q.front()->data);
                q.push(NULL);
            }
        }
        else{
            if(temp -> left){
                q.push(temp->left);
            }
            if(temp -> right){
                q.push(temp->right);
            }
        }
    }
    
    return ans;

}

*/

// Below approach is a recursive algorithm jisse hum left view of a binary tree find karenge. Try to make recursive tree to understand it better
// TC - 0(n) && SC - 0(n)

void solve(Node * root , vector<int> &ans,int level){
    // Base case
    if(root == NULL){
        return ;
    }
    else{
        // agar hum new level pe aa chuke hai it means root -> data ko ans mai dal do . ex initially level 0 pe to ans vector khali hi hoga to uss case mai condition met kar jayegi 
        if(level == ans.size()){
            ans.push_back(root->data);
        }
        solve(root->left,ans,level+1);
        solve(root->right,ans,level+1); // agar uper se niche jaoge to offcource level to bhadega hi .
    }
}

vector<int> leftView(Node *root){
    
    vector<int> ans;
    solve(root,ans,0);
    return ans;
}
