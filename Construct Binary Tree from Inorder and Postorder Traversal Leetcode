/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Inorder array ke har eak element ki mapping uske index se kardi .
    void createMapping(vector<int> &inorder,int n,map<int,int> &nodeToIndex){
        for(int i = 0; i < n; i++){
            nodeToIndex[inorder[i]] = i;
        }
    }

    // Eg - inorder = [9,3,15,20,7] and postorder = [9,15,7,20,3] so isme first hum 3 ko as a node lenge then search karenge iski position inorder array ke andar to uss case mai hume left ki and right ki call marni padegi but jo bhi case ho postorderindex-1 hoga it means ki hum 3 se 20 pe aa jayege aur 20 3 ke right side mai hai inorder ke andar isliye first hume right ke liye call marni padegi then left ke liye.
    // TC - 0(n logn) 0(nlogn) + 0(n) and SC - 0(n).

    TreeNode * solve(vector<int> &postorder,vector<int> &inorder,int & postorderIndex,int inorderStart,int inorderEnd,int n,map<int,int> &nodeToIndex){
        // base case
        if(postorderIndex < 0 || inorderStart > inorderEnd){
            return NULL;
        }
        else{
            int element = postorder[postorderIndex--];
            TreeNode * root = new TreeNode(element);
            int pos = nodeToIndex[element];

            root->right = solve(postorder,inorder,postorderIndex,pos+1,inorderEnd,n,nodeToIndex);
            root->left = solve(postorder,inorder,postorderIndex,inorderStart,pos-1,n,nodeToIndex);

            return root;
        }
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        map<int,int> nodeToIndex;
        createMapping(inorder,n,nodeToIndex);

        int postorderIndex = n-1;
        return solve(postorder,inorder,postorderIndex,0,n-1,n,nodeToIndex);

    }
};
