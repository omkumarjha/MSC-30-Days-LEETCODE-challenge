/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Below is the recursive approach to search a node in the Binary search Tree.
    // In Skey BST TC will go to 0(n) and Sc will be 0(n).
    /*
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root == NULL){
            return NULL;
        }
        else{
            if(root -> val == val){
                return root;
            }
            else if(root -> val > val){
                // Left ke liye call mardo.
                return searchBST(root->left,val);
            }
            else{
                // else Right ke liye call mardo.
                return searchBST(root->right,val);
            }
        }
    }
    */

    // Below is the iterative approach to search a node in The Binary search Tree.
    // TC - 0(n) and SC - 0(1)
    
    TreeNode* searchBST(TreeNode* root, int val) {
       TreeNode * temp = root;

       while(temp != NULL){
           if(temp -> val == val){
               return temp;
           }
           else if(temp -> val > val){
               temp = temp -> left;
           }
           else{
               temp = temp -> right;
           }
       }

       return NULL;

    }
};
