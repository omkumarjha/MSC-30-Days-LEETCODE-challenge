/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        // Love Babbar - TC 0(n) because hum har eak element ko eak hi baar traverse kar rahe hai . & SC - 0(n)
        vector<vector<int>> ans;

        // Edge case
        if(root == NULL){
            return ans;
        }

        queue<TreeNode * > q;
        q.push(root);
        bool leftToRight = true;

        while(!q.empty()){
            int size = q.size(); // q ka size humko eak level ke andar kitne elements hai woh deta hai .
            vector<int> level(size);

            // yeh for loop eak level ko process kar raha hai jaise based on left to right true hai ya false yeh loop level ke andar jittne bhi elements hai usko vector mai push karega.  
            for(int i = 0; i < size; i++){
                TreeNode * temp = q.front();
                q.pop();

                int index = leftToRight ? i : size-i-1;  // yeh line bas yeh batati hai ki elements ko vector mai kis directioo mai dalna hai 
                level[index] = temp -> val;

                if(temp->left != NULL){
                    q.push(temp->left);
                }
                if(temp->right != NULL){
                    q.push(temp->right);
                }
            }

            leftToRight = !leftToRight;
            ans.push_back(level);
        }

        return ans;
      

    }
};
