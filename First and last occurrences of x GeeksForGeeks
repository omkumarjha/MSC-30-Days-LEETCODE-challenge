class Solution
{
    public:
    int firstOccurence(int arr[],int n,int x){
        int start = 0 , end = n - 1 ;
        int mid = start + (end - start)/2;
        int ans = -1;
        
        while(start <= end){
            if(arr[mid] == x){
                ans = mid;
                end = mid - 1;
            }
            else if(arr[mid] > x){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
            mid = start + (end - start)/2;
        }
        return ans;
    }
    
    int lastOccurence(int arr[],int n,int x){
        int start = 0 , end = n - 1;
        int mid = start + (end - start)/2;
        int ans = -1;
        
        while(start <= end){
            if(arr[mid] == x){
                ans = mid;
                start = mid + 1;
            }
            else if(arr[mid] > x){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
            mid = start + (end - start)/2;
        }
        return ans;
    }
    
    
    vector<int> find(int arr[], int n , int x ){
        vector<int> ans;
        int left = firstOccurence(arr,n,x);
        int right = lastOccurence(arr,n,x);
        
        ans.push_back(left);
        ans.push_back(right);
        
        return ans;
        
    
    }
};
