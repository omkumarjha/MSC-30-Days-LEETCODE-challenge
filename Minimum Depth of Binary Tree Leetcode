/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        // Base case
        if(root == NULL){
            return 0; // because root == NULL to woh 0 hi hoga.
        }
        else{
            int left = minDepth(root->left); // root ke left wale tree ke andar jo min depth aa rahi hai nodes ki woh count karo 
            int right = minDepth(root ->right); // root ke right wale tree ke andar jo min depth aa rahi hai nodes ki woh count karo 

            // ex agar left = 0 hai means left subtree mai to koi element hi nhi hai and pura depend right subtree mai kar raha hai to fir minimum thodi nikalenge left and right ka isliye uss case mai hum maximum nikal rahe honge.
            if(left != 0 && right != 0){
                return min(left,right) + 1;
            }
            else{
                return max(left,right) + 1;
            }
        }
    }
};
