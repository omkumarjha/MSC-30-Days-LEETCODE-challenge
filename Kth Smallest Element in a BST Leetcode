/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /*
    Approach 1 : 
        JUST use property of BST. that is store the inorder elements in a vector and iterate it from start .
    */

    // TC - 0(h) and Sc - 0(h) -- if we include space for call stacks.
    /*
    void solve(TreeNode * root,int &index , int k,int &ans){
        // Base case
        if(root == NULL){return ;}

        // Left
        solve(root->left,index,k,ans);

        // agar ans already set hai to niche jaane ki jaroorat hi nhi hai return kardo bas.
        if(ans != -1){return ;}

        index++;
        if(index == k){
            ans = root->val;
        }
        // Right
        solve(root->right,index,k,ans);
    } */
    
    // We can utilize the memory space to 0(1) using moris Inorder traversal.
    void solve(TreeNode * root,int &index,int k,int &ans){
        TreeNode * curr = root;

        while(curr != NULL){
            if(curr -> left == NULL){
                index++;
                if(index == k){
                    ans = curr -> val;
                }
                curr = curr -> right;
            }
            else{
                TreeNode * pred = curr -> left;
                while(pred->right != NULL && pred->right!= curr){
                    pred = pred -> right;
                }
                if(pred ->right == NULL){
                    pred -> right = curr;
                    curr = curr -> left;
                }
                else{
                    pred -> right = NULL;
                    index++;
                    if(index == k){
                        ans = curr -> val;
                    }
                    curr = curr -> right;
                }
            }
        }
    }

    int kthSmallest(TreeNode* root, int k) {
        int index = 0 , ans = -1;

        if(root == NULL){ return NULL; }

        solve(root,index,k,ans);
        return ans;
    }
};
