/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 1st approach ki hum pre order traversal karte karte nodes create karte jae and finally uss LL ka root node return karde - yaha pe space 0(n) ho jayega 
    // Below is the optimized code where space Complexity is 0(1)
    // Love Babbar.
    // TC - 0(n) and Sc - 0(1) . Dry run the first example to understand this approach better.

    void flatten(TreeNode* root) {
        
        TreeNode * curr = root;

        while(curr != NULL){
            if(curr -> left != NULL){
                TreeNode * pred = curr -> left;

                while(pred -> right != NULL){
                    pred = pred -> right;
                }

                pred -> right = curr -> right;
                curr -> right = curr -> left; // kyuki abb curr ka right already track ho raha hai isliye now usko curr -> left se replace kardo .
                curr -> left = NULL;
            }
            curr = curr -> right;
        }
    }
};
