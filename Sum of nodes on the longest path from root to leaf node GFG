//User function Template for C++

/*
structure of the node of the binary tree is as
struct Node
{
    int data;
    struct Node *left;
    struct Node *right;

    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/
class Solution
{
public:
    // maxi and maxlength ko by reference isliye pass kara hai takki agar kisi eak call stack mai inki value update hoti hai to wahi value kisi doosre call stack mai bhi rahe .
    
    void solve(Node * root , int & maxi,int sum,int & maxLen , int len){
        if(root == NULL){
            return ;
        }
        else{
            sum += root -> data;
            len++;
            
            solve(root->left,maxi,sum,maxLen,len);
            solve(root->right,maxi,sum,maxLen,len);
            
            // Below ke if else tabhi chalenge jab we are in leaf node.
            if((root->left == NULL && root->right == NULL ) && len > maxLen){
                maxLen = len;
                maxi = sum;
            }
            else if((root->left == NULL && root->right == NULL ) && len == maxLen){
                maxi = max(sum,maxi);
            }
            
            // jab calls return ho rahi hogi to nodes ka sum and number of nodes ka count minus karte chalna hai .
            sum -= root->data; // yeh do steps optional hai kyuki har eak call stack mai inki value already differ kar rahi hogi
            len--;
        }
    }
    
    int sumOfLongRootToLeafPath(Node *root){
        
        int maxi = INT_MIN , sum = 0 , maxLen = INT_MIN , len = 0;
        solve(root,maxi,sum,maxLen,len);
        
        return maxi;
    }
};
