/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Solved by Om TC - 0(n) SC - 0(H) h is the height of the tree.
    
    void solve(TreeNode * root , int targetSum , bool & isPathSumInTree,int pathSum){
        if(root == NULL){return;} // base case.
        pathSum += root->val; // left mai call marne se pehle hi curr node ke data ko hum store karwa lenge.
        solve(root->left,targetSum,isPathSumInTree,pathSum);

        if((root->left == NULL && root->right == NULL) && pathSum == targetSum){ // agar hum leaf node pe hai aur woh path mil gaya to bas true return kardo.
            isPathSumInTree = true;
        }

        solve(root->right,targetSum,isPathSumInTree,pathSum);

        pathSum -= root->val; // jab hum niche se uper jaa rahe honge to definately curr node ki value ko hume pathsum me se minus karna hoga. takki hum naya path dhoond paye.
    }

    bool hasPathSum(TreeNode* root, int targetSum) {
        // Edge case
        if(root == NULL){
            return false;
        }

        // initially humne mann liya ki root to leaf ka koi aaisa path exist hi nhi kar raha hai jiska sum targetsum ke barabar ho..
        bool isPathSumInTree = false;
        int pathSum = 0; // yeh variable root to leaf jitne bhi nodes hai unki values ko store karega.
        solve(root,targetSum,isPathSumInTree,pathSum);
        return isPathSumInTree;

    }
};
