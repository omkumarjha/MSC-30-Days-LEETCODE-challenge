/* BST Node
struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};
*/

// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively
class Solution
{
    public:
    
    Node * findSuccessor(Node * root,int key){
        Node * successor = NULL;
        
        while(root != NULL){
            if(key >= root->key){
                root = root -> right;
            }
            else{
                successor = root;
                root = root -> left;
            }
        }
        
        return successor;
    }
    
    Node * findPredecessor(Node * root,int key){
        Node * predecessor = NULL;
        
        while(root != NULL){
            if(key > root->key){
                predecessor = root;
                root = root -> right;
            }
            else{
                root = root -> left;
            }
        }
        
        return predecessor;
    }
    
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key){
        
        suc = findSuccessor(root,key);
        pre = findPredecessor(root,key);
    
    }
};
